// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User data
//
// swagger:model User
type User struct {

	// Timestamp when user was created
	// Example: 2025-07-20T12:00:00+07:00
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// User's email address
	// Example: test@example.com
	// Required: true
	// Max Length: 255
	// Format: email
	Email *strfmt.Email `json:"email"`

	// User's first name
	// Example: John
	// Required: true
	// Max Length: 100
	FirstName *string `json:"first_name"`

	// Unique user ID (UUID)
	// Example: 550e8400-e29b-41d4-a716-446655440000
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Language code (e.g., en-US, optional)
	// Example: en-US
	// Required: true
	// Max Length: 5
	Language *string `json:"language"`

	// User's last name
	// Example: Doe
	// Required: true
	// Max Length: 100
	LastName *string `json:"last_name"`

	// Password (at least 8 characters, including one letter and one digit)
	// Example: password123
	// Required: true
	// Min Length: 8
	Password *string `json:"password"`

	// Currency code (ISO 4217, e.g., USD, EUR)
	// Example: USD
	// Required: true
	// Max Length: 3
	// Min Length: 3
	PreferredCurrency *string `json:"preferred_currency"`

	// Public user ID for support
	// Example: TW-X7Y2P8Q4
	// Max Length: 11
	PublicID string `json:"public_id,omitempty"`

	// IANA timezone (e.g., UTC, Asia/Bangkok, optional)
	// Example: UTC
	// Required: true
	// Max Length: 50
	Timezone *string `json:"timezone"`

	// Timestamp when user was last updated
	// Example: 2025-07-20T12:00:00+07:00
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", m.Email.String(), 255); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MaxLength("first_name", "body", *m.FirstName, 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	if err := validate.MaxLength("language", "body", *m.Language, 5); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", *m.LastName, 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 8); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePreferredCurrency(formats strfmt.Registry) error {

	if err := validate.Required("preferred_currency", "body", m.PreferredCurrency); err != nil {
		return err
	}

	if err := validate.MinLength("preferred_currency", "body", *m.PreferredCurrency, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("preferred_currency", "body", *m.PreferredCurrency, 3); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePublicID(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicID) { // not required
		return nil
	}

	if err := validate.MaxLength("public_id", "body", m.PublicID, 11); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	if err := validate.MaxLength("timezone", "body", *m.Timezone, 50); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
