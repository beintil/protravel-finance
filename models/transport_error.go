// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportError Error response for API requests
//
// swagger:model TransportError
type TransportError struct {

	// HTTP status code (e.g., 400, 409, 500)
	// Example: 409
	// Required: true
	Code *int32 `json:"code"`

	// Additional error details (optional)
	// Example: Check email or public_id uniqueness
	Details string `json:"details,omitempty"`

	// Error type identifier
	// Example: ServiceErrorUserAlreadyExists
	Error string `json:"error,omitempty"`

	// Human-readable error message
	// Example: user already exists: test@example.com
	// Required: true
	Message *string `json:"message"`

	// Unique transaction ID for tracing
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Format: uuid
	TransactionID strfmt.UUID `json:"transaction_id,omitempty"`
}

// Validate validates this transport error
func (m *TransportError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *TransportError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *TransportError) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := validate.FormatOf("transaction_id", "body", "uuid", m.TransactionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transport error based on context it is used
func (m *TransportError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransportError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportError) UnmarshalBinary(b []byte) error {
	var res TransportError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
