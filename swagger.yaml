swagger: "2.0"
info:
  version: "1.0.0"
  title: "PROTRAVEL-FINANCE"
  description: ""
  contact:
    name: "PROTRAVEL-FINANCE Team"
    email: "PROTRAVEL-FINANCE@gmail.com"
host: localhost
x-go-package: protravel-finance
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

paths:
  /v1/auth/register:
    post:
      tags:
        - auth
      summary: Register new user
      description: Register a new user with required fields
      operationId: registerUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/RegisterUserRequest"
      responses:
        200:
          description: Successfully registered
          schema:
            $ref: "#/definitions/RegisterUserResponse"
        400:
          description: Bad request (validation error)
          schema:
            $ref: "#/definitions/TransportError"
        409:
          description: User already exists
          schema:
            $ref: "#/definitions/TransportError"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/TransportError"
  /v1/auth/login:
    post:
      tags:
        - auth
      summary: Login user
      description: Authenticate user with login and password
      operationId: loginUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/LoginUserRequest"
      responses:
        200:
          description: Successfully authenticated
          schema:
            $ref: "#/definitions/LoginUserResponse"
        400:
          description: Bad request (validation error)
          schema:
            $ref: "#/definitions/TransportError"
        404:
          description: User not found
          schema:
            $ref: "#/definitions/TransportError"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/TransportError"
  /v1/auth/refresh:
    patch:
      tags:
        - auth
      summary: Refresh token
      description: Refresh expired access token using refresh token
      operationId: refreshToken
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/RefreshTokenRequest"
      responses:
        200:
          description: Successfully refreshed token
          schema:
            $ref: "#/definitions/RefreshTokenResponse"
        400:
          description: Bad request (invalid refresh token)
          schema:
            $ref: "#/definitions/TransportError"
        401:
          description: Unauthorized (expired refresh token)
          schema:
            $ref: "#/definitions/TransportError"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/TransportError"
  /v1/auth/logout:
    delete:
      tags:
        - auth
      summary: Logout user
      description: Logout user and invalidate refresh token
      operationId: logoutUser
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/LogoutRequest"
      responses:
        204:
          description: Successfully logged out
        401:
          description: Unauthorized (invalid refresh token)
          schema:
            $ref: "#/definitions/TransportError"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/TransportError"


definitions:
  RegisterUserRequest:
    type: object
    description: "Register user. At least one of two fields is required: email or phone"
    required:
      - login
      - password
      - preferred_currency
      - first_name
      - last_name
      - language
      - timezone
    properties:
      login:
        type: string
        minLength: 5
      phone:
        type: string
        format: phone
      email:
        type: string
        format: email
        maxLength: 255
        example: "test@example.com"
        description: "User's email address. At least one of two fields is required: email or phone"
      password:
        type: string
        minLength: 8
        format: password
        example: "password123"
        description: "Password (at least 8 characters, including one letter and one digit). At least one of two fields is required: email or phone"
      first_name:
        type: string
        maxLength: 100
        example: "John"
        description: "User's first name"
      last_name:
        type: string
        maxLength: 100
        example: "Doe"
        description: "User's last name"
      preferred_currency:
        type: string
        minLength: 3
        maxLength: 3
        example: "USD"
        description: "Currency code (ISO 4217, e.g., USD, EUR)"
      language:
        type: string
        maxLength: 5
        example: "en-US"
        description: "Language code (e.g., en-US, optional)"
      timezone:
        type: string
        maxLength: 50
        example: "UTC"
        description: "IANA timezone (e.g., UTC, Asia/Bangkok, optional)"

  RegisterUserResponse:
    type: object
    description: "register user response"
    required:
      - auth_token
      - user
    properties:
      auth_token:
        $ref: "#/definitions/AuthTokenResponse"
      user:
        $ref: "#/definitions/User"
        description: register user

  LoginUserRequest:
    type: object
    description: "User login request"
    required:
      - login
      - password
    properties:
      login:
        type: string
        example: "john.doe"
        description: "Login field (can be email, username, phone, or public_id)"
      password:
        type: string
        format: password
        minLength: 8
        description: "User password"

  AuthTokenResponse:
    type: object
    description: "Response with access and refresh tokens"
    required:
      - access_token
      - refresh_token
    properties:
      access_token:
        type: string
        description: "JWT or other token used to authorize API requests"
      refresh_token:
        type: string
        description: "Token used to refresh the access token"

  LoginUserResponse:
    type: object
    required:
      - auth_token
    properties:
      user:
        $ref: "#/definitions/User"
      auth_token:
        $ref: "#/definitions/AuthTokenResponse"
        description: "Successful login response, returns tokens"

  RefreshTokenRequest:
    type: object
    description: "Request to refresh an expired access token"
    required:
      - refresh_token
    properties:
      refresh_token:
        type: string
        description: "The refresh token obtained during login or previous refresh"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  LogoutRequest:
    type: object
    description: "Request to logout"
    required:
      - refresh_token
    properties:
      refresh_token:
        type: string
        description: "The refresh token for logout"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  RefreshTokenResponse:
    type: object
    properties:
      token:
        $ref: "#/definitions/AuthTokenResponse"
        description: "Response with new access and refresh tokens"

  User:
    type: object
    description: "User data"
    properties:
      public_id:
        type: string
        maxLength: 11
        example: "TW-X7Y2P8Q4"
        description: "Public user ID for support"
      email:
        type: string
        format: email
        maxLength: 255
        example: "test@example.com"
        description: "User's email address"
      first_name:
        type: string
        maxLength: 100
        example: "John"
        description: "User's first name"
      last_name:
        type: string
        maxLength: 100
        example: "Doe"
        description: "User's last name"
      preferred_currency:
        type: string
        minLength: 3
        maxLength: 3
        example: "USD"
        description: "Currency code (ISO 4217, e.g., USD, EUR)"
      language:
        type: string
        maxLength: 5
        example: "en-US"
        description: "Language code (e.g., en-US, optional)"
      timezone:
        type: string
        maxLength: 50
        example: "UTC"
        description: "IANA timezone (e.g., UTC, Asia/Bangkok, optional)"

  TransportError:
    type: object
    required:
      - message
      - code
    properties:
      error:
        type: string
        example: "ServiceErrorUserAlreadyExists"
        description: "Error type identifier"
      message:
        type: string
        example: "user already exists: test@example.com"
        description: "Human-readable error message"
      details:
        type: string
        example: "Check email or public_id uniqueness"
        description: "Additional error details (optional)"
      code:
        type: integer
        format: int32
        example: 409
        description: "HTTP status code (e.g., 400, 409, 500)"
      transaction_id:
        type: string
        format: uuid
        example: "123e4567-e89b-12d3-a456-426614174000"
        description: "Unique transaction ID for tracing"
    description: "Error response for API requests"
